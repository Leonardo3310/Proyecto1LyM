/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class Robot 
{

  	private ArrayList<String> procedimientosGuardados = new ArrayList<String>();

	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >		
        |  < ASSINGTO:  "Assignto" >
        |  < GOTO:  "Goto" >
        |  < MOVE:  "MOVE" >
        |  < FACE:  "FACE" >
        |  < TURN:  "TURN" >		
        |  < MOVETOTHE:  "MOVETOTHE" >
        |  < MOVEINDIR:  "MOVEINDIR" >
        |  < JUMPTOTHE:  "JUMPTOTHE" >
        |  < JUMPINDIR:  "JUMPINDIR" >		
        |  < NOP:  "NOP" >		
        |  < NORTH:  "NORTH" >		
        |  < WEST:  "WEST" >		
        |  < SOUTH:  "SOUTH" >		
        |  < EAST:  "EAST" >
        |  < LEFT:  "LEFT" >
        |  < AROUND:  "AROUND" >
        
        
        //CONTROL STRUCTURE		
        |  < IF:  "IF" >
        |  < THEN:  "THEN" >
        |  < ELSE:  "ELSE" >
        |  < WHILE:  "WHILE" >
        |  < DO:  "DO" >
        |  < REPEAT:  "REPEAT" >
        //CONDITIONALS
        |  < FACING:  "FACING" >
        |  < CANPUT:  "canPut" >		
        |  < CANPICK:  "canPick" >		
        |  < CANMOVEINDIR:  "canMoveInDir" >		
        |  < CANJUMPINDIR:  "canJumpInDir" >
        |  < CANMOVETOTHE:  "canMoveToThe" >	
        |  < CANJUMPTOTHE:  "canJumpToThe" >
        |  < NOT:  "NOT" >
        //simbolos
        |  < DP:  ":" >
        |  < PYC:  ";" >
        |  < COMMA:  "," >
        | <BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	
		|	<VARS:     "VARS"  >	
		|	<PROCS:     "PROCS"  >
		|	<ROBOT_R:     "ROBOT_R"  >
        |	<LEFT_BRACKET:     "["  >
        |	<RIGHT_BRACKET:     "]"  >
        |	<PABRIR:     "("  >
        |	<PCERRAR:     ")"  >
		|	<PALITO:     "|"  >
		| 	< BACK: "BACK" >
		| 	< EITHER_FRONT: "EITHER_FRONT" >
        
        		
        
        		
        		
        		
        		
     	
       
}





TOKEN :
{
  		  	<#DIGIT: ["0"-"9"] >
  		| < #CHAR   : ["a"-"z","A"-"Z","Ñ","ñ"] >
		| < #ALPHANUM : <CHAR> | <DIGIT> > 
		| <NUM: (<DIGIT>)+ >
        | < NAME    : (<CHAR>) ("_" | <ALPHANUM>)* >
		
        
}


		//boolean command(uniandes.lym.robot.view.Console sistema) :
	

	
	void empiezo() :
	{
	}
	{
	  < ROBOT_R > (variables())? procs() instructionBlock()
	}

	void procs() :
	{
	}
	{
	  < PROCS > (procedimiento())+
	  
	} 


	void variables():
	{
	}
	{
	  
	  < VARS > (listavar())+  < PYC >
	}

	void listavar():
	{
	}
	{
	
	
	  < NAME > ( <COMMA> <NAME> )*
	}

	void procedimiento():
	{
	}
	{
		nameProcedimiento=< NAME > <LEFT_BRACKET> <PALITO> (Parametros())? <PALITO> ListaInstrucciones() <RIGHT_BRACKET> 
		{String nombre = nameProcedimiento.image;

		if (procedimientosGuardados.containsKey(nombre)){
			throw new Exception("El procedimiento " + nombre + " ya fue creado");
		}
		procedimientosGuardados.add(nombre);
		}
		
	}


void Parametros(): { } {
	  listavar()
	  }

	void instructionBlock() : {}
    {
        <LEFT_BRACKET> ListaInstrucciones() <RIGHT_BRACKET>
    }

	void ListaInstrucciones(): {}{
		instruction() (<PYC> instruction())*
	}
	

	void instruction() : {}
    {
        command() | procedimientoGuardado() listavar() | controlStructure()  | <NOP> <DP >
    }

void procedimientoGuardado() : {}
{
    <NAME> { String nombre = getToken(1).image; }
    {
        if (!procedimientosGuardados.contains(nombre)) {
            throw new Exception("Procedimiento no encontrado: " + nombre);
        }
    }
}

	void controlStructure() : {}
    {
        ifControl() | whileControl() | repeatControl()
    }

    void ifControl() : {}
    {
        <IF> <DP >  condition() <THEN> <DP > instructionBlock() [<ELSE> <DP > ListaInstrucciones() ]
    }

    void whileControl() : {}
    {
        <WHILE> <DP > condition() <DO> <DP > instructionBlock()
    }

    void repeatControl() : {}
    {
        <REPEAT> <DP > num() <PABRIR> instructionBlock() <PCERRAR> 
    }
	

	void condition():
	{
	}
	{
	  facing()| canPut() | canPick()| canMoveInDir()| canJumpInDir()| canMoveToThe()| canJumpToThe()| < NOT > <DP> condition() 
	}

	void direction():
	{
	}
	{
	  < NORTH > | < WEST > | < EAST > | < SOUTH >
	}

	void facing ():
	{
	}
	{
	  < FACING > < DP > direction()

	}

	void canPut():
	{
	}
	{
		< CANPUT > <DP > (num()| < NAME >) < COMMA > (< CHIPS > | < BALLOONS >) 
	  }

	void canPick():
	{
	}
	{
	 < CANPICK > <DP >  (num()| < NAME >) < COMMA > (< CHIPS > | < BALLOONS >)
	}

	void canMoveInDir():
	{ }
	{
	  < CANMOVEINDIR > < DP > (num()| < NAME >) < COMMA > direction()
	}
	
	void canJumpInDir():
	{ }
	{
	  < CANJUMPINDIR > < DP > (num()| < NAME >) < COMMA > direction()
	}

	void canMoveToThe():
	{ }
	{
	  < CANMOVETOTHE > < DP > (num()| < NAME >) < COMMA > direction()
	}

	void canJumpToThe():
	{ }
	{
	  < CANJUMPTOTHE > < DP > (num()| < NAME >) < COMMA > direction()
	}

	void command():
	{	
		
		
	}

	
	{
		
		  (
		  
		 	<MOV> <DP > num() 
		| 	<HOP>  <DP > <CHIPS > <COMMA > num() 
		| 	<GO>   <DP > (num()|< NAME >) < COMMA > (num()|< NAME >) 
		|  <PUT> 	<DP > (num()|< NAME >) <COMMA > (<CHIPS >|< BALLOONS >) 		  			
		|  <PICK> <DP >   (num()|< NAME >) <COMMA > (<CHIPS >|< BALLOONS >) 
	    |  < POP > <DP > (num()|< NAME >) 
	    |  < ASSINGTO > <DP > num() < COMMA > <NAME > 
	    |  < GOTO > <DP > (num()|< NAME >) < COMMA > (num()|< NAME >) 
	    |  < MOVE > <DP > (num()|< NAME >) 
	    |  < TURN > <DP > turn() 
	    |  < MOVETOTHE > <DP > (num()|< NAME >) < COMMA > moveToThe()  
	    |  < MOVEINDIR > <DP > (num()|< NAME >) < COMMA > direction() 
	    |  < JUMPTOTHE > <DP > (num()|< NAME >) < COMMA > moveToThe() 
	    |  < JUMPINDIR > <DP > (num()|< NAME >) < COMMA > direction() 
	    |  < FACE > <DP > direction() <PCERRAR >

		)+

 	}

	void turn():
	{
	}
	{
	  < LEFT > | < RIGHT > | < AROUND > 
	}

	void moveToThe():
	{
	}
	{
	  < LEFT > | < RIGHT > | < BACK > | < EITHER_FRONT >
	}


	
	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}